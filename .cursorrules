# GhostPet Unity 2D 动作游戏 - Cursor 项目规则

## 核心开发规则

### Unity MCP 测试规则 (必须遵守)
**所有游戏功能测试必须使用Unity MCP工具进行连接测试**

#### 测试流程：
1. **连接Unity编辑器**
   - 使用 `mcp_unityMCP_manage_editor` 连接Unity编辑器
   - 检查编辑器状态：`get_state`
   - 启动/暂停游戏：`play`/`pause`

2. **检查控制台状态**
   - 使用 `mcp_unityMCP_read_console` 检查错误和警告
   - 清除控制台：`clear`
   - 监控日志：`types: ['log', 'warning', 'error']`

3. **验证游戏对象状态**
   - 使用 `mcp_unityMCP_manage_gameobject` 检查关键对象
   - 查找玩家：`find` + `by_tag` + `Player`
   - 检查组件：`get_components`
   - 验证敌人：`find` + `by_tag` + `Enemy`

4. **获取场景信息**
   - 使用 `mcp_unityMCP_manage_scene` 获取场景层次结构
   - 检查 `get_hierarchy` 了解完整场景状态

#### 禁止的测试方式：
- ❌ 仅通过代码分析判断功能是否正常
- ❌ 不连接Unity编辑器就声称"测试完成"
- ❌ 忽略控制台错误和警告

#### 测试标准：
- 控制台必须无错误和警告
- 所有关键游戏对象必须存在且状态正确
- 游戏功能必须通过实际运行验证

## 代码质量规则

### 编译和Linter
- 所有代码修改后必须通过linter检查
- 编译错误必须立即修复
- 运行时警告必须处理
- 使用 `read_lints` 工具检查代码质量

### 代码风格
- 使用中文注释和日志输出
- 保持代码简洁和可读性
- 遵循Unity C# 编码规范

## 项目结构规则

### 文件组织
- 临时文件和备份文件必须及时清理
- 文档统一放在 `docs/` 文件夹
- 测试相关文件必须整理归档
- 使用 `delete_file` 清理无用文件

### 脚本组织
- 核心系统：`Assets/Scripts/Core/`
- UI系统：`Assets/Scripts/UI/`
- 战斗系统：`Assets/Scripts/Combat/`
- 敌人系统：`Assets/Scripts/Enemy/`
- 玩家系统：`Assets/Scripts/Player/`

## Git版本控制规则

### 提交前检查
- 每次提交前必须确保无编译错误
- 使用Unity MCP验证游戏运行正常
- 清理所有临时文件和备份文件

### 提交信息
- 提交信息必须清晰描述修改内容
- 使用中文描述修改内容
- 临时文件不得提交到版本控制

## Unity特定规则

### 场景管理
- 使用 `mcp_unityMCP_manage_scene` 管理场景
- 检查场景层次结构确保对象正确

### 游戏对象管理
- 使用 `mcp_unityMCP_manage_gameobject` 管理GameObject
- 验证组件配置正确
- 检查对象状态和属性

### 编辑器集成
- 使用 `mcp_unityMCP_manage_editor` 控制编辑器
- 监控编译状态和播放模式
- 实时检查控制台输出

## 性能优化规则

### 对象池使用
- 优先使用对象池而非Instantiate
- 实现对象池系统减少GC压力
- 监控对象池使用情况

### UI优化
- 避免频繁的UI重建
- 使用UI组件注册表减少查找开销
- 实现UI布局配置系统

## 错误处理规则

### 运行时错误
- 所有错误必须通过Unity MCP检查
- 实现优雅的错误处理和降级方案
- 提供详细的错误日志和调试信息

### 调试信息
- 使用中文调试日志
- 提供清晰的错误描述
- 实现调试开关控制日志输出

---

**重要提醒：** 违反Unity MCP测试规则将导致功能验证不准确，可能遗漏重要的运行时问题。所有测试必须通过实际连接Unity编辑器进行验证。
